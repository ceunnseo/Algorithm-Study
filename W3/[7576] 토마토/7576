// [7576] 언어 : C++, 메모리 (KB) : 14128 , 시간(ms) : 96

#include <bits/stdc++.h>
using namespace std;

#define X first
#define Y second

int board[1001][1001];
int dist[1001][1001];

int n, m;

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);


    int min_day=0; // 최소 날짜, 결과값

    cin >> m >> n; // 순서 주의 

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> board[i][j];
            dist[i][j] = -1; // -1로 설정하면 visit 불필요
        }
    }


    queue<pair<int, int>> q;
    
    // 시작점 (1) 탐색
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (board[i][j] == 1) {
                q.push({ i,j }); // 시작점이 여러개인 경우 시작점을 다 넣고 bfs 돌리면 됨
                dist[i][j] = 0; // 시작점의 거리는 0
            }
        }
    }

    while (!q.empty()) {
        auto cur = q.front(); // 변수 알아서 지정
        q.pop();
        for (int dir = 0; dir < 4; dir++) {
            int nx = cur.X + dx[dir];
            int ny = cur.Y + dy[dir];
            if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue; // 범위 벗어남
            if (dist[nx][ny] >= 0 || board[nx][ny] != 0) continue; // 이미 접근한 상태
            dist[nx][ny] = dist[cur.X][cur.Y] + 1;
            q.push({ nx, ny });
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (board[i][j] == 0 && dist[i][j] == -1) { // 못익은 토마토 존재
                cout << -1;
                return 0;
            }
            min_day = max(min_day, dist[i][j]); // max인 이유 : 익지 않은경우 -1을 출력해야 하므로
        }
    }
    cout << min_day;
}
